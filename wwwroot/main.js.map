{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app-routing.module.ts","./src/app/app.component.html","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/currency-converter.service.ts","./src/environments/environment.development.ts","./src/main.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","<div class=\"container\">\r\n  <h1>Currency Converter</h1>\r\n\r\n  <!-- Enter Amount -->\r\n  <div class=\"pill-with-label\">\r\n    <input type=\"text\"\r\n           placeholder=\"Enter Amount\"\r\n           [(ngModel)]=\"amount\"\r\n           class=\"amounts\" />\r\n    <span class=\"iso-label\">{{ fromCurrency }}</span>\r\n  </div>\r\n  <div class=\"dropdown-row\">\r\n    <select class=\"currency-dropdown\" [(ngModel)]=\"fromCurrency\">\r\n      <option value=\"\" disabled selected>Select Currency</option>\r\n      <option *ngFor=\"let currency of currencies\" [value]=\"currency.iso\">\r\n        {{ currency.iso }} - {{ currency.currencyName }}\r\n      </option>\r\n    </select>\r\n    <button class=\"switch-btn\" (click)=\"switchCurrencies()\">⇄</button>\r\n    <select class=\"currency-dropdown\" [(ngModel)]=\"toCurrency\">\r\n      <option value=\"\" disabled selected>Select Currency</option>\r\n      <option *ngFor=\"let currency of currencies\" [value]=\"currency.iso\">\r\n        {{ currency.iso }} - {{ currency.currencyName }}\r\n      </option>\r\n    </select>\r\n  </div>\r\n  <div class=\"button-row\">\r\n    <button class=\"convert-btn\" (click)=\"onConvert()\">Convert</button>\r\n  </div>\r\n  <div *ngIf=\"fxRate\" class=\"fx-pill\">\r\n    1 {{ fromCurrency }} = {{ fxRate }} {{ toCurrency }}\r\n  </div>\r\n  <div class=\"pill-with-label\">\r\n    <input type=\"text\"\r\n           placeholder=\"Result Amount\"\r\n           [value]=\"resultAmount\"\r\n           class=\"amounts\"\r\n           readonly />\r\n    <span class=\"iso-label\">{{ toCurrency }}</span>\r\n  </div>\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { CurrencyConverterService } from './currency-converter.service';\r\nimport { Currency } from 'src/models/currency-model'; // ✔ Correct model import\r\nimport { ConversionResult } from 'src/models/converted-result-model';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent implements OnInit {\r\n  currencies: Currency[] = [];\r\n\r\n  fromCurrency: string = '';\r\n  toCurrency: string = '';\r\n  amount: string = '';\r\n  resultAmount: string = '';\r\n  fxRate: string = '';\r\n\r\n  constructor(private currencyService: CurrencyConverterService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.currencyService.getCurrencies().subscribe((data) => {\r\n      this.currencies = data;\r\n    });\r\n  }\r\n\r\n  switchCurrencies(): void {\r\n    const temp = this.fromCurrency;\r\n    this.fromCurrency = this.toCurrency;\r\n    this.toCurrency = temp;\r\n  }\r\n\r\n  onConvert() {\r\n    if (!this.fromCurrency || !this.toCurrency || !this.amount) {\r\n      alert('Please select both currencies and enter an amount.');\r\n      return;\r\n    }\r\n\r\n    this.currencyService.convert(this.fromCurrency, this.toCurrency, this.amount).subscribe({\r\n      next: (result: ConversionResult) => {\r\n        this.resultAmount = result.resultAmount.toString();\r\n        this.fxRate = result.exchangeRate.toString();\r\n      },\r\n      error: () => {\r\n        alert('Conversion failed. Please try again.');\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    AppRoutingModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { inject, Injectable } from '@angular/core';\nimport { environment } from '../environments/environment.development';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Currency } from '../models/currency-model';\r\nimport { ConversionResult } from '../models/converted-result-model';\r\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CurrencyConverterService {\n\n  private http = inject(HttpClient);\r\n  private apiURL = environment.apiURL + 'currencyconverter'; \r\n\n  getCurrencies(): Observable<Currency[]> {\r\n    return this.http.get<Currency[]>(`${this.apiURL}/currencies`);\r\n  }\n\n  convert(from: string, to: string, amount: string) {\r\n    return this.http.get<ConversionResult>(`${this.apiURL}/convert?from=${from}&to=${to}&amount=${amount}`);\r\n  }\n}\n","export const environment = {\n    apiURL: ''\n};\n","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"names":["RouterModule","routes","AppRoutingModule","forRoot","imports","exports","i0","AppComponent","constructor","currencyService","ngOnInit","getCurrencies","subscribe","data","currencies","switchCurrencies","temp","fromCurrency","toCurrency","onConvert","amount","alert","convert","next","result","resultAmount","toString","fxRate","exchangeRate","error","selectors","decls","vars","consts","template","ctx","FormsModule","BrowserModule","HttpClientModule","AppModule","bootstrap","declarations","inject","environment","HttpClient","CurrencyConverterService","apiURL","http","get","from","to","factory","providedIn","__NgCli_bootstrap_1","bootstrapModule","catch","err","console"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}